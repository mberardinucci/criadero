<?php
App::uses('AppController', 'Controller');
/**
 * Horses Controller
 *
 * @property Horse $Horse
 * @property PaginatorComponent $Paginator
 */
class HorsesController extends AppController {

/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Horse->recursive = 0;
		$this->set('horses', $this->Paginator->paginate());
	}


		public function index1() {

		if ($this->request->is('post')) {

			if($this->request->data['Product']['active'] == '1' || $this->request->data['Product']['active'] == '0') {
				$conditions[] = array(
					'Product.active' => $this->request->data['Product']['active']
				);
				$this->Session->write('Product.active', $this->request->data['Product']['active']);
			} else {
				$this->Session->write('Product.active', '');
			}

			if(!empty($this->request->data['Product']['brand_id'])) {
				$conditions[] = array(
					'Product.brand_id' => $this->request->data['Product']['brand_id']
				);
				$this->Session->write('Product.brand_id', $this->request->data['Product']['brand_id']);
			} else {
				$this->Session->write('Product.brand_id', '');
			}

			if(!empty($this->request->data['Product']['name'])) {
				$filter = $this->request->data['Product']['filter'];
				$this->Session->write('Product.filter', $filter);
				$name = $this->request->data['Product']['name'];
				$this->Session->write('Product.name', $name);
				$conditions[] = array(
					'Product.' . $filter . ' LIKE' => '%' . $name . '%'
				);
			} else {
				$this->Session->write('Product.filter', '');
				$this->Session->write('Product.name', '');
			}

			$this->Session->write('Product.conditions', $conditions);
			return $this->redirect(array('action' => 'index'));

		}

		if($this->Session->check('Product')) {
			$all = $this->Session->read('Product');
		} else {
			$all = array(
				'active' => '',
				'brand_id' => '',
				'name' => '',
				'filter' => '',
				'conditions' => ''
			);
		}
		$this->set(compact('all'));

		$this->Paginator = $this->Components->load('Paginator');

		$this->Paginator->settings = array(
			'Product' => array(
				'contain' => array(
					'Category',
					'Brand',
				),
				'recursive' => -1,
				'limit' => 50,
				'conditions' => $all['conditions'],
				'order' => array(
					'Product.name' => 'ASC'
				),
				'paramType' => 'querystring',
			)
		);
		$products = $this->Paginator->paginate();

		$brands = $this->Product->Brand->findList();

		$brandseditable = array();
		foreach ($brands as $key => $value) {
			$brandseditable[] = array(
				'value' => $key,
				'text' => $value,
			);
		}

		// $categories= $this->Product->Category->find('list', array(
		// 	'recursive' => -1,
		// 	'order' => array(
		// 		'Category.name' => 'ASC'
		// 	)
		// ));

		$categories = $this->Product->Category->generateTreeList(null, null, null, '--');

		$categorieseditable = array();
		foreach ($categories as $key => $value) {
			$categorieseditable[] = array(
				'value' => $key,
				'text' => $value,
			);
		}

		$tags = ClassRegistry::init('Tag')->find('all', array(
			'order' => array(
				'Tag.name' => 'ASC'
			),
		));

		$this->set(compact('products', 'brands', 'brandseditable', 'categorieseditable', 'tags'));

	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Horse->exists($id)) {
			throw new NotFoundException(__('Invalid horse'));
		}
		$options = array('conditions' => array('Horse.' . $this->Horse->primaryKey => $id));
		$this->set('horse', $this->Horse->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Horse->create();
			if ($this->Horse->save($this->request->data)) {
				$this->Session->setFlash(__('The horse has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The horse could not be saved. Please, try again.'));
			}
		}
		$genders = $this->Horse->Gender->find('list');
		$breeds = $this->Horse->Breed->find('list');
		$types = $this->Horse->Type->find('list');
		$colors = $this->Horse->Color->find('list');
		$states = $this->Horse->State->find('list');
		$lfts = $this->Horse->find('list', array('conditions' => array('Horse.gender_id' => 1));
		$rghts = $this->Horse->find('list', array('conditions' => array('Horse.gender_id' => 2));
		$this->set(compact('genders', 'breeds', 'types', 'colors', 'states','lfts','rghts'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Horse->exists($id)) {
			throw new NotFoundException(__('Invalid horse'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Horse->save($this->request->data)) {
				$this->Session->setFlash(__('The horse has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The horse could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Horse.' . $this->Horse->primaryKey => $id));
			$this->request->data = $this->Horse->find('first', $options);
		}
		$genders = $this->Horse->Gender->find('list');
		$breeds = $this->Horse->Breed->find('list');
		$types = $this->Horse->Type->find('list');
		$colors = $this->Horse->Color->find('list');
		$states = $this->Horse->State->find('list');
		$this->set(compact('genders', 'breeds', 'types', 'colors', 'states'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->Horse->id = $id;
		if (!$this->Horse->exists()) {
			throw new NotFoundException(__('Invalid horse'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Horse->delete()) {
			$this->Session->setFlash(__('The horse has been deleted.'));
		} else {
			$this->Session->setFlash(__('The horse could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}}
